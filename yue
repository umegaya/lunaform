#!/bin/bash -eu

#===========================================
# pre-requisite
#===========================================
VERSION='0.1.0'
DOCKER=`which docker`
if [ -z $DOCKER ]; then
	echo "docker(https://www.docker.com) is required by yue"
fi
DOCKER_VERSION=`$DOCKER --version`

MACHINE=`which docker-machine`
if [ -z $MACHINE ]; then
	echo "docker-machine(https://www.docker.com) is required by yue"
fi
MACHINE_VERSION=`$MACHINE --version`



#===========================================
# usage
#===========================================
function usage {
cat << __USAGE__
usage: yue [options] (command) [arg...]

programming platform for distribute computing environment

common options:
    -v,--verbose                    show verbose output
    --version                       show version
    -w,--workdir={rel path}         (run and build) set root path of data directory and log directory. 
                                    {rel path} must be relative and inside to current working directory.
    --luact={path}                  using luact module from {path} in local file system
    --help                          show this usage

commands:
	init {project name}             initialize project structure

    run {execfile or image}         run specified {execfile(*.lua) or image(*/*:*)} (default)
        --daemon=false                  enable daemon mode. if -H is specified, this option is always true
        -p,--path　　                   add search path for lua libraries. same file path in local file system autometically mounted.
        -d config=value                 pass configuration variable to docker. equivalent to give --config=value to docker
        -l config=value                 pass configuration variable to luact. equivalent to give --config=value to luact
        -c,--core=1                     specify number of luajit VM thread. default == number of CPU core
        -n,--node={name}                specify node to run
        -H

    build {image}                   build container image whose name is {imagename} with current setting
    	-f={file path}                  specify Dockerfile path (if it exists in ., yue autometically use it)
        -e=main.lua                     specify entry point of your application.
        -d config=value                 pass configuration variable to docker. equivalent to give --config=value to docker
        -l config=value                 pass configuration variable to luact, as command line argument to CMD directive when Dockerfile autometically generated. 
                                        if you use your dockerfile, it will be ignored.
        -p,--push=false                 execute docker push {image} when build succeed.

    node create {name}              create infrastructure of yue whose name is {name} on various IaaS
        -t,--type=any(amazonec2|azure|google|digitalocean|openstack|rackspace|softlayer|virtualbox|vmwarevcloudair|vmwarevsphere)
                                        specify iaas type. if not specified, randomly selected entry in factory file is used.
        -c="~/.yue/factory"             specify node factory json file. factory file describes provider account/preferred machine information of yue instances 

    node rm {name}                  destroy yue node which name is {name}
    node ls                         list nodes which created by the project
    node ssh {name}                 login to node which name is {name}

__USAGE__
}



#===========================================
# version
#===========================================
function show_version {
cat << __VERSION__
__  ____ __ __    ____
\ \ \  // / \ \  / ___\\
 \ \/ / | | | | / /
  \  /  | | | | ~~~~~~~~ version $VERSION
 _/ /   \ \_/ / \ \___   $DOCKER_VERSION
 \_/     \___/   \____/  
it is brilliant on the cloud
	
(c)2014 - 2015 Takehiro Iyatomi(iyatomi@gmail.com)
__VERSION__
}



#===========================================
# utils
#===========================================
function join { local IFS="$1"; shift; echo "$*"; }
function abspath {
	local dir=`pwd`
	echo ${1/\./$dir}
}
function remove_arg {
	#echo "remove_arg:$@"
	local from=`expr $1`
	local to=`expr $2`
	shift 2
	#echo "from/to $from/$to"
	if [ $from -eq 1 ]; then
		#echo "${@:1:2}"
		echo "${@:$((to+1)):$#}";
	else
		if [ $to -eq $# ]; then
			echo "${@:1:$((from-1))}";
		else
			echo "${@:1:$((from-1))} ${@:$((to+1)):$#}";
		fi
	fi
}
function work_node {
	local dir=`pwd`
	if [ -e "$dir/.yue/project" ]; then
		cat $dir/.yue/project
	else
		echo ""
	fi
}
function active_node {
	if [ $# -ge 1 ]; then
		echo "`work_node`.$1"
	else
		echo `work_node`
	fi
}
function switch_to {
	local nodename=`active_node $@`
	#echo "switch_to:$nodename"
	eval $(docker-machine env $nodename)
}
function fill_env_value {
	echo $(eval echo $(cat $1 | sed 's/\"/\\"/g'))
}



#===========================================
# common command line arguments (bit tricky...)
#===========================================
SUBCOMMAND=run
WORKDIR="/lunarsurface"
LOGDIR="$WORKDIR/logs"
DATADIR="$WORKDIR/data"
LIBPATH=(/usr/local/share/lua/5.1/ /usr/local/share/luajit-2.1.0-alpha/)
LUAJIT_BIN="luajit-2.1.0-alpha -e 'require([[jit.opt]]).start([[minstitch=10000]])' -e 'package.path=[[/luact/?.lua;]]..package.path'"
LUACT_PATH=
LUACT_IMAGE="umegaya/luact:core"
PRELOADS=(libpthread.so.0 libjemalloc.so.1)	
PRELOAD_LIBS=`join : ${PRELOADS[@]}`
VERBOSE=
LUACT_CONFIG=()
DOCKER_CONFIG=()

cnt=1
for i in "$@"
do
	#echo "$cnt[$@]"
case $i in
	-v)
	VERBOSE=yes
	set -- `remove_arg $cnt $cnt $@`
	;;
	--verbose)
	VERBOSE=yes
	set -- `remove_arg $cnt $cnt $@`
	;;
	--version)
	show_version
	exit 0
	;;
	--path=*)
	LIBPATH[${#LIBPATH[@]}]=`abspath ${i#*=}`
	set -- `remove_arg $cnt $cnt $@`
	;;
	--luact=*)
	LUACT_PATH=${i#*=}
	set -- `remove_arg $cnt $cnt $@`
	;;
	-d)
	DOCKER_CONFIG[${#DOCKER_CONFIG[@]}]=$2
	set -- `remove_arg $cnt $((cnt+1)) $@`
	;;
	-l)
	LUACT_CONFIG[${#LUACT_CONFIG[@]}]=$2
	set -- `remove_arg $cnt $((cnt+1)) $@`
	;;
	-w)
	WORKDIR="$2"
	LOGDIR="$WORKDIR/logs"
	DATADIR="$WORKDIR/data"
	set -- `remove_arg $cnt $((cnt+1)) $@`
	;;
	--workdir=*)
	WORKDIR="${i#*=}"
	LOGDIR="$WORKDIR/logs"
	DATADIR="$WORKDIR/data"
	set -- `remove_arg $cnt $cnt $@`
	;;
	--help)
	usage
	exit 0
	;;	
	"run" | "node" | "sdn" | "build" | "init")
	SUBCOMMAND=$i
	set -- `remove_arg $cnt $cnt $@`
	;;
	*)
	cnt=$((cnt+1))
	;;
esac
done

#echo "after process:$@"


#===========================================
# init command
#===========================================
function init {
	local project=$1
	if [ -z $project ]; then
		echo "please speficy project name"
		exit -1
	fi
	mkdir .yue
	local node=`work_node`
	if [ ! -z $node ]; then
		if [ $node != $project ]; then
			docker-machine rm $node
		fi
	fi
	#echo "docker-machine create --driver virtualbox $project"
	docker-machine create --driver virtualbox $project
	echo "$project" > .yue/project
}



#===========================================
# run command
#===========================================
function run {
	local DAEMON=
	local EXECFILE=
	local EXECIMAGE=
	local NUM_CORE=
	local HOST=
	while [ $# -gt 0 ]; do
		case $1 in
			--daemon)
			DAEMON=yes
			shift
			;;
			-p)
			LIBPATH[${#LIBPATH[@]}]=`abspath $2`
			shift
			shift
			;;
			-c)
			NUM_CORE=$2
			shift
			shift
			;;
			-H)
			HOST=$2
			shift
			shift
			;;
			--host=*)
			HOST=${1#*=}
			shift
			;;
			--core=*)
			NUM_CORE=${1#*=}
			shift
			;;
			-*)
			echo "unknown option: $1"
			usage
			exit -1
			;;
			*.lua)
			EXECFILE=$1
			shift
			;;
			*/*)
			EXECIMAGE=$1
			shift
			;;
		esac
	done
	#echo "subc:$SUBCOMMAND"
	#echo "daemon:$DAEMON"	️
	#echo "libpath:${LIBPATH[@]}"
	#echo "config:${LUACT_CONFIG[@]}"
	#echo "execfile:$EXECFILE"
	#echo "luajit:$LUAJIT_BIN"
	#echo "host:$HOST"
	local luact_options="--datadir=$DATADIR"
	if [ ${#LUACT_CONFIG[@]} -ne 0 ]; then
		for c in "${LUACT_CONFIG[@]}"
		do
			luact_options="$luact_options --$c"
		done
	fi
	if [ ! -z $NUM_CORE ]; then
		luact_options="$luact_options --n_core=$NUM_CORE"
	fi
	if [ ! -z $VERBOSE ]; then
		luact_options="$luact_options --verbose=true"
	fi

	local docker_options="--privileged -e LD_PRELOAD=$PRELOAD_LIBS --net=\"host\" -v `pwd`:$WORKDIR"
	if [ ${#DOCKER_CONFIG[@]} -ne 0 ]; then
		for c in "${DOCKER_CONFIG[@]}"
		do
			docker_options="$docker_options --$c"
		done
	fi
	if [ ${#LIBPATH[@]} -ne 0 ]; then
		for p in "${LIBPATH[@]}"
		do
			docker_options="$docker_options -v $p:$p"
		done
	fi
	if [ ! -z $LUACT_PATH ]; then
		docker_options="$docker_options -v $LUACT_PATH:/luact"
	fi
	if [ ! -z $DAEMON ]; then
		docker_options="$docker_options -d"
		luact_options="--logdir=$LOGDIR $luact_options"
	else
		docker_options="$docker_options --rm -ti"
	fi
	switch_to $HOST
	if [ ! -z $EXECFILE ]; then
		local cmd="cd $WORKDIR && $LUAJIT_BIN /luact/run.lua $luact_options $EXECFILE"
		#echo "cmdl:	docker run $docker_options $LUACT_IMAGE bash -c \"$cmd\""
		if [ ! -z $DAEMON ]; then
			CID=$(docker run $docker_options $LUACT_IMAGE bash -c "$cmd")
			echo $CID
		else
			docker run $docker_options $LUACT_IMAGE bash -c "$cmd"
		fi
	else
		if [ ! -z $EXECIMAGE ]; then
			if [ ! -z $DAEMON ]; then
				CID=$(docker run $docker_options $EXECIMAGE)
				echo $CID
			else
				docker run $docker_options $EXECIMAGE
			fi
		else
			echo "either execute file or image must be specified"
		fi
	fi
}



#===========================================
# build command
#===========================================
function build {
	local BUILDERFILE=
	local IMAGENAME=
	local EXECFILE=main.lua
	local PUSH=
	while [ $# -gt 0 ]; do
		case $1 in
			-f)
			BUILDERFILE=$2
			shift
			shift
			;;
			-e)
			EXECFILE=$2
			shift
			shift
			;;
			"-p" | "--push")
			PUSH=yes
			shift
			;;
			*/*)
			IMAGENAME=$1
			shift
			;;
		esac
	done
	if [ -z $IMAGENAME ]; then
		echo "image name must be specified"
		exit -1
	fi
	local luact_options="--logdir=$LOGDIR --datadir=$DATADIR"
	if [ ${#LUACT_CONFIG[@]} -ne 0 ]; then
		for c in "${LUACT_CONFIG[@]}"
		do
			luact_options="$luact_options --$c"
		done
	fi
	local docker_options="-t $IMAGENAME"
	if [ -e "$BUILDERFILE" ]; then
		docker_options="$docker_options -f $BUILDERFILE"
	else
		if [ ! -e "./Dockerfile" ]; then
			BUILDERFILE=./Dockerfile
			cat << __TEMPLATE__  > $BUILDERFILE
FROM umegaya/luact:core
ENV LD_PRELOAD=$PRELOAD_LIBS
ADD . $WORKDIR
CMD bash -c "cd $WORKDIR && $LUAJIT_BIN /luact/run.lua $luact_options $EXECFILE"
__TEMPLATE__
		fi
	fi
	if [ ${#DOCKER_CONFIG[@]} -ne 0 ]; then
		for c in "${DOCKER_CONFIG[@]}"
		do
			docker_options="$docker_options --$c"
		done
	fi
	#echo "cmdl: docker build $docker_options ."
	switch_to
	docker build $docker_options .
	if [ ! -z $PUSH ]; then
		docker push $IMAGENAME
	fi
}



#===========================================
# node command
#===========================================
function node {
	local FACTORY_PATHS=(.yue/factory ~/.yue/factory)
	local TYPE=
	local FACTORY=
	local NAME=
	local SUBC=create
	for c in "${FACTORY_PATHS[@]}"
	do
		if [ -e $c ]; then
			if [ -z $FACTORY ]; then
				FACTORY=$c
			fi
		fi
	done
	while [ $# -gt 0 ]; do
		case $1 in
			-t)
			TYPE=$2
			shift
			shift
			;;
			--type=*)
			TYPE=${1#*=}
			shift
			;;
			-c)
			FACTORY=$2
			shift
			shift
			;;
			--config=*)
			FACTORY=${1#*=}
			shift
			;;
			"create" | "rm" | "ls" | "ssh")
			SUBC=$1
			shift
			;;
			*)
			NAME=$1
			shift
			;;
		esac
	done
	if [[ $SUBC != "ls" && -z $NAME ]]; then
		echo "name should be specified"
		exit -1
	fi
	
	local docker_options="--rm -e LD_PRELOAD=$PRELOAD_LIBS -v `pwd`:$WORKDIR"
	if [ ${#DOCKER_CONFIG[@]} -ne 0 ]; then
		for c in "${DOCKER_CONFIG[@]}"
		do
			docker_options="$docker_options --$c"
		done
	fi
	if [ ! -z $LUACT_PATH ]; then
		docker_options="$docker_options -v $LUACT_PATH:/luact"
	fi

	local luact_options="--datadir=$DATADIR --logdir=$LOGDIR"
	if [ ${#LUACT_CONFIG[@]} -ne 0 ]; then
		for c in "${LUACT_CONFIG[@]}"
		do
			luact_options="$luact_options --$c"
		done
	fi

	local cmd=
	case $SUBC in
		create)
		local fullname=`active_node $NAME`
		docker-machine ip $fullname 2>&1>/dev/null && [ $? == 0 ] && echo "$fullname already created" && exit 0
		echo "create new machine for $fullname"
		FACTORY=`fill_env_value $FACTORY`
		cmd="cd $WORKDIR && $LUAJIT_BIN /luact/run.lua $luact_options /luact/luact/bin/node.lua create $fullname $TYPE '${FACTORY}'"
		;;
		rm)
		local fullname=`active_node $NAME`
		cmd="cd $WORKDIR && $LUAJIT_BIN /luact/run.lua $luact_options /luact/luact/bin/node.lua rm $fullname"
		;;
		ls)
		cmd="cd $WORKDIR && $LUAJIT_BIN /luact/run.lua $luact_options /luact/luact/bin/node.lua ls"
		;;
		ssh)
		local fullname=`active_node $NAME`
		docker-machine ssh $fullname
		exit 0
		;;
	esac
	switch_to
	#echo "cmdl: docker run $docker_options $LUACT_IMAGE bash -c \"$cmd\""
	#eval `docker run $docker_options $LUACT_IMAGE bash -c "$cmd"`
	#docker run $docker_options $LUACT_IMAGE bash -c "$cmd"
	out=`docker run $docker_options $LUACT_IMAGE bash -c "$cmd"`
	if [ $SUBC != 'ls' ]; then
		eval $out
	else
		local wn=`work_node`
		eval $out | grep $wn
	fi
}



#===========================================
# list command
#===========================================
function list {
	local N=3
}



#===========================================
# bootstrap commands
#===========================================
if [ "$SUBCOMMAND" = "init" ]; then
	init $@
	exit 0
fi
if [ "$SUBCOMMAND" = "run" ]; then
	run $@
	exit 0
fi
if [ "$SUBCOMMAND" = "build" ]; then
	build $@
	exit 0
fi
if [ "$SUBCOMMAND" = "node" ]; then
	node $@
	exit 0
fi


