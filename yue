#!/bin/bash -eu

#===========================================
# pre-requisite
#===========================================
VERSION='0.1.0'
DOCKER=`which docker`
if [ -z $DOCKER ]; then
	echo "docker(https://www.docker.com) is required by yue"
	exit -1
fi
DOCKER_VERSION=`$DOCKER --version`
if [ `uname` = "Darwin" ]; then
	MACHINE_BIN_NAME=${DOCKER_MACHINE:-docker-machine_darwin-amd64}
else
	MACHINE_BIN_NAME=${DOCKER_MACHINE:-docker-machine_linux-amd64}
fi
MACHINE=`which $MACHINE_BIN_NAME`
if [ -z $MACHINE ]; then
	echo "docker-machine(https://www.docker.com) is required by yue"
	exit -2
fi
BOOT2DOCKER_URL="https://github.com/boot2docker/boot2docker/releases/download/v1.6.0/boot2docker.iso"
MACHINE_VERSION=`$MACHINE --version`
CERTPATH=.yue/certs
MACHINEPATH=.yue/machine
SSLTOOL=openssl
CA="$CERTPATH/ca.pem"
CAKEY="$CERTPATH/ca-key.pem"
CERT="$CERTPATH/cert.pem"
CERTKEY="$CERTPATH/key.pem"
ID_RSA="$CERTPATH/id_rsa"
MACHINE_CMD="$MACHINE_BIN_NAME --storage-path=$MACHINEPATH --tls-ca-cert=$CA --tls-ca-key=$CAKEY --tls-client-cert=$CERT --tls-client-key=$CERTKEY"


#===========================================
# usage
#===========================================
function usage {
cat << __USAGE__
usage: yue [options] (command) [arg...]

programming platform for distribute computing environment

common options:
    -v,--verbose                    show verbose output
    --version                       show version
    -w,--workdir={rel path}         (run and build) set root path of data directory and log directory. 
                                    {rel path} must be relative and inside to current working directory.
    --luact={path}                  using luact module from {path} in local file system
    --help                          show this usage

commands:
	init {project name}             initialize project structure

    run {execfile or image}         run specified {execfile(*.lua) or image(*/*:*)} (default)
        --daemon=false                  enable daemon mode. if -H is specified, this option is always true
        -p,--path　　                   add search path for lua libraries. same file path in local file system autometically mounted.
        -d config=value                 pass configuration variable to docker. equivalent to give --config=value to docker
        -l config=value                 pass configuration variable to luact. equivalent to give --config=value to luact
        -c,--core=1                     specify number of luajit VM thread. default == number of CPU core
        -n,--node={name}                specify node to run
        -m,--mount={path}               mount log and data to {path} on host machine
        -H

    build {image}                   build container image whose name is {imagename} with current setting
    	-f={file path}                  specify Dockerfile path (if it exists in ., yue autometically use it)
        -e=main.lua                     specify entry point of your application.
        -d config=value                 pass configuration variable to docker. equivalent to give --config=value to docker
        -l config=value                 pass configuration variable to luact, as command line argument to CMD directive when Dockerfile autometically generated. 
                                        if you use your dockerfile, it will be ignored.
        -p,--push=false                 execute docker push {image} when build succeed.

    node create {name}              create infrastructure of yue whose name is {name} on various IaaS
        -t,--type=any(amazonec2|azure|google|digitalocean|openstack|rackspace|softlayer|virtualbox|vmwarevcloudair|vmwarevsphere)
                                        specify iaas type. if not specified, randomly selected entry in factory file is used.
        -c="~/.yue/factory"             specify node factory json file. factory file describes provider account/preferred machine information of yue instances 

    node rm {name}                  destroy yue node which name is {name}
    node ls                         list nodes which created by the project
    node ssh {name}                 login to node which name is {name}

__USAGE__
}


#===========================================
# version
#===========================================
function show_version {
cat << __VERSION__
__  ____ __ __    ____
\ \ \  // / \ \  / ___\\
 \ \/ / | | | | / /
  \  /  | | | | ~~~~~~~~ version $VERSION
 _/ /   \ \_/ / \ \___   $DOCKER_VERSION
 \_/     \___/   \____/  $MACHINE_VERSION
it is brilliant on the cloud
	
(c)2014 - 2015 Takehiro Iyatomi(iyatomi@gmail.com)
__VERSION__
}


#===========================================
# utils
#===========================================
function join { local IFS="$1"; shift; echo "$*"; }
function abspath {
	local dir=`pwd`
	echo ${1/\./$dir}
}
function remove_arg {
	#echo "remove_arg:$@"
	local from=`expr $1`
	local to=`expr $2`
	shift 2
	#echo "from/to $from/$to"
	if [ $from -eq 1 ]; then
		#echo "${@:1:2}"
		echo "${@:$((to+1)):$#}";
	else
		if [ $to -eq $# ]; then
			echo "${@:1:$((from-1))}";
		else
			echo "${@:1:$((from-1))} ${@:$((to+1)):$#}";
		fi
	fi
}
function work_node {
	local dir=`pwd`
	if [ -e "$dir/.yue/project" ]; then
		cat $dir/.yue/project
	else
		echo ""
	fi
}
function active_node {
	if [ $# -ge 1 ]; then
		echo "`work_node`.$1"
	else
		echo `work_node`
	fi
}
function switch_to {
	local nodename=`active_node $@`
	echo "switch_to:$nodename"
	eval $($MACHINE_CMD env $nodename)
}
function fill_env_value {
	echo $(eval echo $(cat $1 | sed 's/\"/\\"/g'))
}

function init_certs {
	if [ ! -e $CERTPATH ]; then
		mkdir -p $CERTPATH
		echo "=== create ca / ca key" # create ca files with no credential
		$SSLTOOL req -nodes -new -x509 -days 36500 -sha256 -keyout $CAKEY -out $CA
		echo "=== create server cert key"
		$SSLTOOL genrsa -out $CERTPATH/server-key.pem 2048
		echo "=== create server cert key signing request"
		$SSLTOOL req -subj "/CN=server" -new -key $CERTPATH/server-key.pem -out $CERTPATH/server.csr
		echo "=== create signed server cert key by using ca"
		$SSLTOOL x509 -req -days 36500 -in $CERTPATH/server.csr -CA $CA -CAkey $CAKEY -out $CERTPATH/server.pem
		echo "=== create cert key"
		$SSLTOOL genrsa -out $CERTKEY 2048
		echo "=== create cert key signing request"
		$SSLTOOL req -subj '/CN=client' -new -key $CERTKEY -out $CERTPATH/client.csr
		echo "=== create extfile.cnf"
		echo extendedKeyUsage = clientAuth > $CERTPATH/extfile.cnf
		echo "=== create signed cert key by using ca"
		$SSLTOOL x509 -req -days 36500 -in $CERTPATH/client.csr -CA $CA -CAkey $CAKEY -out $CERT -extfile $CERTPATH/extfile.cnf
		echo "=== create common ssh key pair"
		ssh-keygen -q -b 2048 -t rsa -N '' -f $ID_RSA
		echo "=== remove unnecessary files"
		rm -v $CERTPATH/client.csr $CERTPATH/server.csr $CERTPATH/extfile.cnf
		echo "=== modify file permissions"
		chmod -v 0400 $CAKEY $CERTKEY
		chmod -v 0444 $CA $CERT
	fi
}

function init_factory {
	if [ ! -e .yue/factory ]; then
		echo "create factory"
		cat << "__FACTORY_TEMPLATE__"  > .yue/factory
{
	"amazonec2": {
		"access-key": "$AWS_ACCESS_KEY", 
		"secret-key": "$AWS_SECRET_KEY",
		"region": "$EC2_REGION",
		"zone": "c",
		"vpc-id": "$AWS_VPC_ID",
		"ami": "ami-50eaed51"
	},
	"virtualbox": {
	}
}
__FACTORY_TEMPLATE__
	fi
}

function init_ignore {
	if [ ! -e .gitignore ]; then
		cat << __IGNORE_TEMPLATE__  > .gitignore
*.iso
*.vmdk
logs
data
__IGNORE_TEMPLATE__
	fi
}

function ignore_under {
	pushd $1
		if [ ! -e .gitignore ]; then
			cat << __IGNORE_TEMPLATE__ > .gitignore
*
__IGNORE_TEMPLATE__
		fi
	popd
}

# run docker work space
WORK_NODE=`work_node`
if [ ! -z $WORK_NODE ]; then
	#echo "$MACHINE_CMD url `work_node`"
	$MACHINE_CMD url $WORK_NODE >& /dev/null
	if [ $? -ne 0 ]; then
		echo "start dev machine..."
		$MACHINE_CMD start $WORK_NODE
		echo "done"
	fi
fi

#===========================================
# common command line arguments (bit tricky...)
#===========================================
SUBCOMMAND=run
WORKDIR="/lunarsurface"
LOGDIR="$WORKDIR/logs"
DATADIR="$WORKDIR/data"
LIBPATH=(/usr/local/share/lua/5.1/ /usr/local/share/luajit-2.1.0-alpha/)
LUAJIT_BIN="luajit-2.1.0-alpha -e 'require([[jit.opt]]).start([[minstitch=10000]])' -e 'package.path=[[/luact/?.lua;]]..package.path'"
LUACT_PATH=
IMAGE_DIGEST="sha256:297346e498db363e779fcd9a78f59c6eea553235cfe26a37def2ffe599f47f6e"
#prev: sha256:ef061a49ca96a97d252568a92a8fcf6042a4b3b513b5227e27d5ac7d771691cd
LUACT_IMAGE="umegaya/luact@$IMAGE_DIGEST"
PRELOADS=(libpthread.so.0 libjemalloc.so.1)	
PRELOAD_LIBS=`join : ${PRELOADS[@]}`
VERBOSE=
LUACT_CONFIG=(ssl.pubkey=$CERTPATH/server.pem ssl.privkey=$CERTPATH/server-key.pem)
DOCKER_CONFIG=()
BUILD_SRCS=(.yue/certs src)

# parse common argument
cnt=1
next_cnt=
while [ ! -z "${!cnt:-}" ]
do
	#echo "[$@][${!cnt}]"
case ${!cnt} in
	-v)
	VERBOSE=yes
	set -- `remove_arg $cnt $cnt $@`
	;;
	--verbose)
	VERBOSE=yes
	set -- `remove_arg $cnt $cnt $@`
	;;
	--version)
	show_version
	exit 0
	;;
	--path=*)
	LIBPATH[${#LIBPATH[@]}]=`abspath ${!cnt#*=}`
	set -- `remove_arg $cnt $cnt $@`
	;;
	--luact=*)
	LUACT_PATH=${1#*=}
	set -- `remove_arg $cnt $cnt $@`
	;;
	-d)
	next_cnt=$((cnt+1))
	DOCKER_CONFIG[${#DOCKER_CONFIG[@]}]=${!next_cnt}
	set -- `remove_arg $cnt $((cnt+1)) $@`
	;;
	-l)
	next_cnt=$((cnt+1))
	LUACT_CONFIG[${#LUACT_CONFIG[@]}]=${!next_cnt}
	set -- `remove_arg $cnt $((cnt+1)) $@`
	;;
	-w)
	next_cnt=$((cnt+1))
	WORKDIR=${!next_cnt}
	LOGDIR="$WORKDIR/logs"
	DATADIR="$WORKDIR/data"
	set -- `remove_arg $cnt $((cnt+1)) $@`
	;;
	--workdir=*)
	WORKDIR="${!cnt#*=}"
	LOGDIR="$WORKDIR/logs"
	DATADIR="$WORKDIR/data"
	set -- `remove_arg $cnt $cnt $@`
	;;
	--help)
	usage
	exit 0
	;;	
	"run" | "node" | "sdn" | "build" | "init")
	SUBCOMMAND=${!cnt}
	set -- `remove_arg $cnt $cnt $@`
	;;
	*)
	cnt=$((cnt+1))
	;;
esac
done

#echo "after process:$@"


#===========================================
# init command
#===========================================
function init {
	local project=$1
	if [ -z $project ]; then
		echo "please speficy project name"
		exit -1
	fi
	init_certs
	init_factory
	init_ignore
	local node=`work_node`
	if [ ! -z $node ]; then
		if [ $node != $project ]; then
			$MACHINE_CMD rm $node
		fi
	fi
	mkdir -p $MACHINEPATH/cache
	if [ ! -e $MACHINEPATH/cache/boot2docker.iso ]; then
		curl -L $BOOT2DOCKER_URL -o $MACHINEPATH/cache/boot2docker.iso
	fi
	# echo "$MACHINE_CMD create --driver virtualbox $project"
	$MACHINE_CMD create --driver virtualbox $project
	ignore_under $MACHINEPATH/machines/$project
	if [ ! -e $MACHINEPATH/.gitignore ]; then
		cat << __IGNORE_TEMPLATE__ > $MACHINEPATH/.gitignore
machines/.active
cache
__IGNORE_TEMPLATE__
	fi
	# setup remain file structure
	echo "$project" > .yue/project
	if [ ! -e src ]; then
		mkdir src
	fi
}



#===========================================
# run command
#===========================================
function run {
	local DAEMON=
	local CONTAINER_NAME=yue
	local RESTART=
	local EXECFILE=
	local EXECIMAGE=
	local NUM_CORE=
	local HOST=
	local MOUNT_PATH=`pwd`
	while [ $# -gt 0 ]; do
		case $1 in
			--daemon*)
			DAEMON=yes
			shift
			;;
			--name=*)
			CONTAINER_NAME=${1#*=}
			shift
			;;
			--restart*)
			RESTART=yes
			shift
			;;
			-p)
			LIBPATH[${#LIBPATH[@]}]=`abspath $2`
			shift
			shift
			;;
			-c)
			NUM_CORE=$2
			shift
			shift
			;;
			-m)
			MOUNT_PATH=$2
			shift
			shift
			;;
			--mount=*)
			MOUNT_PATH=${1#*=}
			shift
			;;
			-H)
			HOST=$2
			shift
			shift
			;;
			--host=*)
			HOST=${1#*=}
			shift
			;;
			--core=*)
			NUM_CORE=${1#*=}
			shift
			;;
			-*)
			echo "unknown option: $1"
			usage
			exit -1
			;;
			*.lua)
			EXECFILE=$1
			shift
			;;
			*/*)
			EXECIMAGE=$1
			shift
			;;
		esac
	done
	#echo "subc:$SUBCOMMAND"
	#echo "daemon:$DAEMON"	️
	#echo "libpath:${LIBPATH[@]}"
	#echo "config:${LUACT_CONFIG[@]}"
	#echo "execfile:$EXECFILE"
	#echo "luajit:$LUAJIT_BIN"
	#echo "host:$HOST"
	local luact_options="--datadir=$DATADIR"
	if [ ${#LUACT_CONFIG[@]} -ne 0 ]; then
		for c in "${LUACT_CONFIG[@]}"
		do
			luact_options="$luact_options --$c"
		done
	fi
	if [ ! -z $NUM_CORE ]; then
		luact_options="$luact_options --n_core=$NUM_CORE"
	fi
	if [ ! -z $VERBOSE ]; then
		luact_options="$luact_options --verbose=true"
	fi

	local docker_options="--privileged -e LD_PRELOAD=$PRELOAD_LIBS --net=\"host\""
	if [ ${#DOCKER_CONFIG[@]} -ne 0 ]; then
		for c in "${DOCKER_CONFIG[@]}"
		do
			docker_options="$docker_options --$c"
		done
	fi
	if [ ! -z $DAEMON ]; then
		docker_options="$docker_options -d --name $CONTAINER_NAME"
		luact_options="--logdir=$LOGDIR $luact_options"
	else
		docker_options="$docker_options --rm -ti"
	fi
	switch_to $HOST
	if [ ! -z $RESTART ]; then
		# TODO : change this to the command for shutdown entire cluster
		# it will be achieved by running another container to invoke shutdown command to yue server
		docker kill $CONTAINER_NAME >& /dev/null
		docker rm -v $CONTAINER_NAME >& /dev/null
	fi
	if [ ! -z $EXECFILE ]; then
		docker_options="$docker_options -v $MOUNT_PATH:$WORKDIR"
		if [ ${#LIBPATH[@]} -ne 0 ]; then
			for p in "${LIBPATH[@]}"
			do
				docker_options="$docker_options -v $p:$p"
			done
		fi
		if [ ! -z $LUACT_PATH ]; then
			docker_options="$docker_options -v $LUACT_PATH:/luact"
		fi
		local cmd="cd $WORKDIR && $LUAJIT_BIN /luact/run.lua $luact_options $EXECFILE"
		#echo "cmdl:	docker run $docker_options $LUACT_IMAGE bash -c \"$cmd\""
		if [ ! -z $DAEMON ]; then
			CID=$(docker run $docker_options $LUACT_IMAGE bash -c "$cmd")
			echo $CID
		else
			docker run $docker_options $LUACT_IMAGE bash -c "$cmd"
		fi
	else
		# TODO : we should give default mount point of data/logs in container?
		# now user explicitly specify like -d volume=/data:/lunarsurface/data and -d volume=/logs:/lunarsurface/logs.
		if [ ! -z $EXECIMAGE ]; then
			if [ ! -z $DAEMON ]; then
				CID=$(docker run $docker_options $EXECIMAGE)
				echo $CID
			else
				docker run $docker_options $EXECIMAGE
			fi
		else
			echo "either execute file or image must be specified"
		fi
	fi
}



#===========================================
# build command
#===========================================
function build {
	local IMAGENAME=
	local EXECFILE=src/main.lua
	local PUSH=
	local NEW_BUILDER=
	while [ $# -gt 0 ]; do
		case $1 in
			-e)
			EXECFILE=$2
			shift
			shift
			;;
			-n)
			NEW_BUILDER=yes
			shift
			;;
			"-p" | "--push")
			PUSH=yes
			shift
			;;
			*.lua)
			echo "should specify image name (user/name:tag)"
			exit -3
			;;
			*/*)
			IMAGENAME=$1
			shift
			;;
		esac
	done
	if [ -z $IMAGENAME ]; then
		echo "image name must be specified"
		exit -1
	fi
	local luact_options="--logdir=$LOGDIR --datadir=$DATADIR"
	if [ ${#LUACT_CONFIG[@]} -ne 0 ]; then
		for c in "${LUACT_CONFIG[@]}"
		do
			luact_options="$luact_options --$c"
		done
	fi
	echo "re-copying files to build"
	rm -rf build
	git clone `git config --get remote.origin.url` --branch `git rev-parse --abbrev-ref HEAD` build
	if [[ ! -e "./build/Dockerfile" || ! -z NEW_BUILDER ]]; then
		cat << __TEMPLATE__  > ./Dockerfile
FROM $LUACT_IMAGE
ENV LD_PRELOAD=$PRELOAD_LIBS
ADD . $WORKDIR
RUN chmod 600 $WORKDIR/$ID_RSA && \  
  echo "IdentityFile $WORKDIR/$ID_RSA" >> /etc/ssh/ssh_config && \  
  echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config  
CMD bash -c "cd $WORKDIR && $LUAJIT_BIN /luact/run.lua $luact_options $EXECFILE"
__TEMPLATE__
		cp ./Dockerfile ./build/Dockerfile
	fi
	local docker_options="-t $IMAGENAME"
	if [ ${#DOCKER_CONFIG[@]} -ne 0 ]; then
		for c in "${DOCKER_CONFIG[@]}"
		do
			docker_options="$docker_options --$c"
		done
	fi
	#echo "cmdl: docker build $docker_options ."
	switch_to # default
	docker build $docker_options build
	if [ ! -z $PUSH ]; then
		docker push $IMAGENAME
	fi
	# rm -rf build
}



#===========================================
# node command
#===========================================
function node {
	local FACTORY_PATHS=(.yue/factory ~/.yue/factory)
	local TYPE=
	local FACTORY=
	local NAME=
	local SUBC=create
	for c in "${FACTORY_PATHS[@]}"
	do
		if [ -e $c ]; then
			if [ -z $FACTORY ]; then
				FACTORY=$c
			fi
		fi
	done
	while [ $# -gt 0 ]; do
		case $1 in
			-t)
			TYPE=$2
			shift
			shift
			;;
			--type=*)
			TYPE=${1#*=}
			shift
			;;
			-c)
			FACTORY=$2
			shift
			shift
			;;
			--config=*)
			FACTORY=${1#*=}
			shift
			;;
			"create" | "rm" | "ls" | "ssh" | "env")
			SUBC=$1
			shift
			;;
			*)
			NAME=$1
			shift
			if [ $SUBC == "ssh" ]; then
				break
			fi
			;;
		esac
	done
	if [[ $SUBC != "ls" && $SUBC != "ssh" && $SUBC != "env" && -z $NAME ]]; then
		echo "name should be specified"
		exit -1
	fi
	
	local docker_options="--rm -e LD_PRELOAD=$PRELOAD_LIBS -v `pwd`:$WORKDIR"
	if [ ${#DOCKER_CONFIG[@]} -ne 0 ]; then
		for c in "${DOCKER_CONFIG[@]}"
		do
			docker_options="$docker_options --$c"
		done
	fi
	if [ ! -z $LUACT_PATH ]; then
		docker_options="$docker_options -v $LUACT_PATH:/luact"
	fi

	local luact_options="--datadir=$DATADIR --logdir=$LOGDIR"
	if [ ${#LUACT_CONFIG[@]} -ne 0 ]; then
		for c in "${LUACT_CONFIG[@]}"
		do
			luact_options="$luact_options --$c"
		done
	fi

	local cmd=
	local fullname=`active_node $NAME`
	case $SUBC in
		create)
		$MACHINE_CMD ip $fullname 2>&1>/dev/null && [ $? == 0 ] && echo "$fullname already created" && exit 0
		echo "create new machine for $fullname"
		FACTORY=`fill_env_value $FACTORY`
		cmd="cd $WORKDIR && $LUAJIT_BIN /luact/run.lua $luact_options /luact/luact/bin/node.lua create $fullname $TYPE '${FACTORY}'"
		;;
		rm)
		cmd="cd $WORKDIR && $LUAJIT_BIN /luact/run.lua $luact_options /luact/luact/bin/node.lua rm $fullname"
		;;
		ls)
		cmd="cd $WORKDIR && $LUAJIT_BIN /luact/run.lua $luact_options /luact/luact/bin/node.lua ls"
		;;
		env)
		$MACHINE_CMD env $fullname
		exit 0
		;;
		ssh)
		$MACHINE_CMD ssh $fullname $@
		exit 0
		;;
	esac
	switch_to
	#echo "cmdl: docker run $docker_options $LUACT_IMAGE bash -c \"$cmd\" | sed -e 's/docker-machine/$MACHINE_CMD/g'"
	#eval `docker run $docker_options $LUACT_IMAGE bash -c "$cmd"`
	#docker run $docker_options $LUACT_IMAGE bash -c "$cmd"
	local out=`docker run $docker_options $LUACT_IMAGE bash -c "$cmd" | sed -e 's/docker-machine/$MACHINE_CMD/g'`
	#echo "cmd out:$out"
	eval $out
}



#===========================================
# list command
#===========================================
function list {
	local N=3
}



#===========================================
# bootstrap commands
#===========================================
if [ "$SUBCOMMAND" = "init" ]; then
	init $@
	exit 0
fi
if [ "$SUBCOMMAND" = "run" ]; then
	run $@
	exit 0
fi
if [ "$SUBCOMMAND" = "build" ]; then
	build $@
	exit 0
fi
if [ "$SUBCOMMAND" = "node" ]; then
	node $@
	exit 0
fi


